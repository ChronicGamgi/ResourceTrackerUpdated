import fs from "fs";
import path from "path";
import crypto from "crypto";

const MIGRATIONS_DIR = path.join(process.cwd(), "drizzle");
const OUTPUT_FILE = path.join(process.cwd(), "lib", "migration-hashes.ts");

/**
 * Generates a `migration-hashes.ts` file containing the SHA256 hashes
 * of all .sql files in the drizzle directory. It normalizes line endings
 * to ensure hashes are consistent across platforms.
 */
export function generateMigrationHashes(
  migrationsDir = MIGRATIONS_DIR,
  outputFile = OUTPUT_FILE,
) {
  try {
    console.log("üîç Starting migration hash generation...");
    const migrationFiles = fs
      .readdirSync(MIGRATIONS_DIR)
      .filter((file) => file.endsWith(".sql"))
      .sort(); // Sort to ensure consistent order

    if (migrationFiles.length === 0) {
      console.log("No .sql migration files found. Skipping hash generation.");
      const emptyFileContent = `// This file is auto-generated by \`npm run db:generate-hashes\`. Do not edit manually.\n\nexport const MIGRATION_HASHES: string[] = [];\n`;
      fs.writeFileSync(OUTPUT_FILE, emptyFileContent, "utf-8");
      return;
    }

    const hashes = migrationFiles.map((file) => {
      const filePath = path.join(MIGRATIONS_DIR, file);
      const fileContent = fs.readFileSync(filePath, "utf-8");
      // Normalize line endings to LF before hashing
      const normalizedContent = fileContent.replace(/\r\n/g, "\n");
      const hash = crypto
        .createHash("sha256")
        .update(normalizedContent)
        .digest("hex");
      console.log(`  - Hashed ${file}: ${hash}`);
      return hash;
    });

    const fileContent = `// This file is auto-generated by \`npm run db:generate-hashes\`. Do not edit manually.\n\nexport const MIGRATION_HASHES: string[] = ${JSON.stringify(
      hashes,
      null,
      2,
    )};\n`;

    fs.writeFileSync(OUTPUT_FILE, fileContent, "utf-8");
    console.log(`‚úÖ Successfully generated migration hashes at ${OUTPUT_FILE}`);
  } catch (error) {
    console.error(
      "‚ùå An error occurred while generating migration hashes:",
      error,
    );
    process.exit(1);
  }
}

// Run the function only if the script is executed directly
if (require.main === module) {
  generateMigrationHashes();
}
